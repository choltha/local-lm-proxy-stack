version: "3.5"

services:

  litellm-server:
    build:
      context: ./litellm
    image: ghcr.io/berriai/litellm:main-stable
    #########################################
    ## Uncomment these lines to start proxy with a config.yaml file ##
    # volumes:
    #   - ./proxy_server_config.yaml:/app/config.yaml
    # command: [ "--config", "./config.yaml", "--port", "4000"]
    ###############################################
    ports:
      - "4000:4000" # Map the container port to the host, change the host port if necessary
    environment:
        DATABASE_URL: "postgresql://postgres:example@litellm-db:5432/postgres"
        STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
        REDIS_HOST: "litellm-redis"
        REDIS_PORT: "6379"
        REDIS_AUTH: "myredissecret"
    env_file:
      - litellm.env
    networks:
      - local-lm-proxy
      - internet-access
    volumes:
      - ./litellm_config.yaml:/app/config.yaml
    command: [ "--config", "/app/config.yaml", "--detailed_debug" ]

  litellm-db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - local-lm-proxy

  litellm-redis:
    image: redis:7.2.4
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    restart: always
    ports:
      - 6379:6379
    networks:
      - local-lm-proxy

  langfuse-server:
    build:
      dockerfile: ./web/Dockerfile
      context: ./langfuse
    image: langfuse/langfuse:2
    depends_on:
      - langfuse-db
      - langfuse-redis
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@langfuse-db:5432/postgres
      - NEXTAUTH_SECRET=mysecret
      - SALT=mysalt
      - NEXTAUTH_URL=http://localhost:3000
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}
      - LANGFUSE_WORKER_HOST=${LANGFUSE_WORKER_HOST:-langfuse-worker}
      - LANGFUSE_WORKER_PASSWORD=${LANGFUSE_WORKER_PASSWORD:-mybasicauthsecret}
      - NODE_OPTIONS=--max-old-space-size=8192
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - local-lm-proxy

  langfuse-worker:
    build:
      dockerfile: ./worker/Dockerfile
      context: ./langfuse
    depends_on:
      - langfuse-db
      - langfuse-redis
    ports:
      - "3030:3030"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@langfuse-db:5432/postgres
      - NEXTAUTH_SECRET=mysecret
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}
      - PORT=${PORT:-3030}
      - REDIS_HOST=${REDIS_HOST:-langfuse-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_AUTH=${REDIS_AUTH:-myredissecret}
      - LANGFUSE_WORKER_PASSWORD=${LANGFUSE_WORKER_PASSWORD:-mybasicauthsecret}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - local-lm-proxy

  langfuse-redis:
    image: redis:7.2.4
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    restart: always
    ports:
      - 6379:6379
    networks:
      - local-lm-proxy


  langfuse-db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    volumes:
      - langfuse-database_data:/var/lib/postgresql/data
    networks:
      - local-lm-proxy

  caddy:
    image: caddy:2
    ports:
      - "8001:8001"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    networks:
      - local-lm-proxy
      - internet-access

volumes:
  langfuse-database_data:
    driver: local


networks:
  local-lm-proxy:
    name: local-lm-proxy
    internal: true
  internet-access:
    driver: bridge